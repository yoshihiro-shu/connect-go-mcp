// Code generated by connect-go-mcp DO NOT EDIT.
package userv1mcp

import (
	"context"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
	connectgomcp "github.com/yoshihiro-shu/connect-go-mcp"
)

// NewMCPServerWithTools creates and returns a configured UserService MCP server
func NewUserServiceMCPServer(baseURL string, opts ...connectgomcp.ClientOption) *server.MCPServer {
	server := server.NewMCPServer("UserService", "1.0.0")

	toolHandler := connectgomcp.NewToolHandler(baseURL, opts...)
	server.AddTool(
		mcp.NewTool("GetUser - Get user information",
			mcp.WithDescription("Request to get user information Parameter user_id: User ID (required) Return value: User name, email address, creation timestamp"),
			mcp.WithString("user_id"),
		),
		func(ctx context.Context, req mcp.CallToolRequest) (*mcp.CallToolResult, error) {
			return toolHandler.Handle(ctx, req, "GetUser")
		},
	)

	server.AddTool(
		mcp.NewTool("CreateUser - Create a user",
			mcp.WithDescription("Request to create a user Parameters name: User name (required), email: Email address (required) Return value: Created user information"),
			mcp.WithString("name"),
			mcp.WithString("email"),
		),
		func(ctx context.Context, req mcp.CallToolRequest) (*mcp.CallToolResult, error) {
			return toolHandler.Handle(ctx, req, "CreateUser")
		},
	)

	server.AddTool(
		mcp.NewTool("ListUsers - Get user list",
			mcp.WithDescription("Request to get user list Parameters limit: Number of records to retrieve (optional), offset: Offset (optional) Return value: User list"),
			mcp.WithNumber("limit"),
			mcp.WithNumber("offset"),
		),
		func(ctx context.Context, req mcp.CallToolRequest) (*mcp.CallToolResult, error) {
			return toolHandler.Handle(ctx, req, "ListUsers")
		},
	)

	return server
}
