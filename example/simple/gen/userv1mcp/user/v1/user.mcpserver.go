// Code generated by connect-go-mcp DO NOT EDIT.
package userv1mcp

import (
	"context"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
	connectgomcp "github.com/yoshihiro-shu/connect-go-mcp"
)

// NewMCPServerWithTools は設定済みの UserService MCP サーバーを生成して返します
func NewUserServiceMCPServer(baseURL string, opts ...connectgomcp.ClientOption) *server.MCPServer {
	server := server.NewMCPServer("UserService", "1.0.0")

	toolHandler := connectgomcp.NewToolHandler(baseURL, opts...)
	server.AddTool(
		mcp.NewTool("GetUser ユーザー情報取得",
			mcp.WithDescription("ユーザー情報取得リクエスト パラメータ user_id: ユーザーID（必須） 戻り値: ユーザー名、メールアドレス、作成日時"),
			mcp.WithString("user_id"),
		),
		func(ctx context.Context, req mcp.CallToolRequest) (*mcp.CallToolResult, error) {
			return toolHandler.Handle(ctx, req, "GetUser")
		},
	)

	server.AddTool(
		mcp.NewTool("CreateUser ユーザー作成",
			mcp.WithDescription("ユーザー作成リクエスト パラメータ name: ユーザー名（必須）、email: メールアドレス（必須） 戻り値: 作成されたユーザー情報"),
			mcp.WithString("name"),
			mcp.WithString("email"),
		),
		func(ctx context.Context, req mcp.CallToolRequest) (*mcp.CallToolResult, error) {
			return toolHandler.Handle(ctx, req, "CreateUser")
		},
	)

	server.AddTool(
		mcp.NewTool("ListUsers ユーザー一覧取得",
			mcp.WithDescription("ユーザー一覧取得リクエスト パラメータ limit: 取得件数（オプション）、offset: オフセット（オプション） 戻り値: ユーザー一覧"),
			mcp.WithNumber("limit"),
			mcp.WithNumber("offset"),
		),
		func(ctx context.Context, req mcp.CallToolRequest) (*mcp.CallToolResult, error) {
			return toolHandler.Handle(ctx, req, "ListUsers")
		},
	)

	return server
}
